# Describe VMs
home = ENV['HOME'] # Используем глобальную переменную $HOME
$script = <<-SCRIPT
#ini
WHITE='\033[1;97;40m'
RED='\033[1;91;40m'
YELLOW='\033[1;93;40m'
GREEN='\033[1;92;40m'
NORMAL='\033[0m'
#start
echo -e "${WHITE}╔═════════════════════════════╗${NORMAL}\n${WHITE}║ Vagrant provision commands  ║${NORMAL}\n${WHITE}╚═════════════════════════════╝${NORMAL}"
#1
echo -e "${WHITE}======= Detected Mdadm  =======${NORMAL}"
v_install=`sudo yum list installed | grep 'mdadm'`
v_serch=`expr "$v_install" : '.*\(mdadm\)'`
if ! [ $v_serch  ]
then
    echo -e "${YELLOW}[WARNING]${NORMAL} Mdadm not installed!"
    echo "Install Mdadm"
    #date +"%T"
    sudo yum -y install mdadm
    #date +"%T"
    wait
fi
v_install=`sudo yum list installed | grep mdadm`
unset v_serch
v_serch=`expr "$v_install" : '.*\(mdadm\)'`
if ! [ $v_serch  ]
then
    echo -e "${RED}[ERROR]${NORMAL} Mdadm not installed, run stop"
else
    echo -e "Mdadm installation completed!"
fi
#2
echo -e "${WHITE}======== Search disks  ========${NORMAL}"
lsblk
#v_count=`lsblk --output NAME | grep -P '^sd.' | wc -l`
v_list=$(lsblk --output NAME | grep -P '^sd.')
v_x=`lsblk | grep -P '/$'`
v_disks=""
for i in $v_list; do
    if ! [[ "$v_x" == *"$i"* ]]; then
      #echo "$i"
      v_disks="$v_disks /dev/$i"
    else
		v_disk_for_root=$i
    fi
done
echo -e "Detected disks $v_disks"
echo -e "Root "/" - $v_disk_for_root"
#3
echo -e "${WHITE}======= Creating RAID10 =======${NORMAL}"
v_tmp=`lsblk --output TYPE | grep -P 'raid' | wc -l`
if ! [ "$v_tmp" -eq 0  ]
then
    echo -e "${RED}[WARN]${NORMAL} RAID found, run stop"
    exit
else
	echo -e "RAID not found, crate RAID10"
fi
# /dev/sdb /dev/sdc /dev/sdd /dev/sde#
yes y | sudo mdadm --create --verbose /dev/md0 --level=10 --raid-devices=4$v_disks
##v_tmp=`yes y | sudo mdadm --create --verbose /dev/md0 --level=10 --raid-devices=4$v_disks 2>/dev/null`
cat /proc/mdstat | grep -v 'resync'
echo -e "${WHITE}===== Creating Partitions =====${NORMAL}"
v_tmp=`sudo parted -s --script /dev/md0 'print free' | grep 'Partition Table' 2>/dev/null`
echo "$v_tmp"
echo "Creating GPT"
v_tmp=`sudo parted -s --script /dev/md0 'mklabel gpt' 2>/dev/null`
#echo "$v_tmp"
v_tmp=`sudo parted -s --script /dev/md0 'print free' | grep 'Partition Table'  2>/dev/null`
echo "$v_tmp"

v_tmp=`sudo parted -s --script /dev/md0 'mkpart primary ext4 0 104' 2>/dev/null`
echo "$v_tmp"
v_tmp=`sudo parted -s --script /dev/md0 'mkpart primary ext4 104 208' 2>/dev/null`
echo "$v_tmp"
v_tmp=`sudo parted -s --script /dev/md0 'mkpart primary ext4 208 312' 2>/dev/null`
echo "$v_tmp"
v_tmp=`sudo parted -s --script /dev/md0 'mkpart primary ext4 312 416' 2>/dev/null`
echo "$v_tmp"
v_tmp=`sudo parted -s --script /dev/md0 'mkpart primary ext4 416 520' 2>/dev/null`
echo "$v_tmp"
v_tmp=`sudo parted -s --script /dev/md0 'print free' | grep -v 'Free Space' 2>/dev/null`
echo "$v_tmp"

echo -e "\
${WHITE}╔═════════════════════════════════════╗${NORMAL}\n\
${WHITE}║         RAID10 - created ${GREEN}successful ${WHITE}║${NORMAL}\n\
${WHITE}║            GPT - created ${GREEN}successful ${WHITE}║${NORMAL}\n\
${WHITE}║ Five partition - created ${GREEN}successful ${WHITE}║${NORMAL}\n\
${WHITE}╚═════════════════════════════════════╝${NORMAL}"
#lsblk
SCRIPT

MACHINES = {
  # VM name "kernel update"
	:"raid-10" => {
			# VM box
			:box_name => "centos/7",
			# VM CPU count
			:cpus => 2,
			# VM RAM size (Mb)
			:memory => 1024,
			# networks
			:net => [],
			# forwarded ports
			:forwarded_port => [],
			# disks
			:disks => {
				:sata1 => {
					:dfile => home + '/VirtualBox VMs/sata1.vdi',
					:size => 250,
					:port => 1
					},
				:sata2 => {
					:dfile => home + '/VirtualBox VMs/sata2.vdi',
					:size => 250, # Megabytes
					:port => 2
					},
				:sata3 => {
					:dfile => home + '/VirtualBox VMs/sata3.vdi',
					:size => 250,
					:port => 3
					},
				:sata4 => {
					:dfile => home + '/VirtualBox VMs/sata4.vdi',
					:size => 250, # Megabytes
					:port => 4
					}
				}
	}
}
Vagrant.configure("2") do |config|
  MACHINES.each do |boxname, boxconfig|
    # Disable shared folders
    config.vm.synced_folder ".", "/vagrant", disabled: false
    # Apply VM config
    config.vm.define boxname do |box|
      # Set VM base box and hostname
      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxname.to_s
      # Additional network config if present
      if boxconfig.key?(:net)
        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
      end
      # Port-forward config if present
      if boxconfig.key?(:forwarded_port)
        boxconfig[:forwarded_port].each do |port|
          box.vm.network "forwarded_port", port
        end
      end
      # VM resources config
      box.vm.provider "virtualbox" do |v|
        # Set VM RAM size and CPU count
        v.memory = boxconfig[:memory]
        v.cpus = boxconfig[:cpus]
		#_!
		needsController = false
		boxconfig[:disks].each do |dname, dconf|
		unless File.exist?(dconf[:dfile])
		v.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
					needsController =  true
			  end

		end
		if needsController == true
		 v.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
		 boxconfig[:disks].each do |dname, dconf|
			 v.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
		 end
		end
		#_!
      end
	  ##box.vm.provision :shell, path: "auto_bild_raid1.sh", keep_color: true
	  box.vm.provision "shell", inline: $script, keep_color: true
    end
  end
end
